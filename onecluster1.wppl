// One-class clustering:
// Given a set of datapoints and a starting point,
// derive one cluster around the starting point.
//
// This task is related to multiple clustering in that we are not assuming
// that each data point belongs to only one cluster (nor that
// it has probabilities of belonging to different cluster), instead
// a point may fully belong to multiple clusters.
// We are not modeling this task as being multiple clustering in that we
// are not trying to find multiple "normal" clusterings that each assume
// disjoint clusters.
//
// This task is also related to one-class classifiers in that we are
// trying to determine a boundary around a single class, rather than
// distinguish between multiple classes.
// We are not modeling this task as one-class classification
// in that it is not supervised: We do not have training data
// for the "positive" class, we are trying to derive
// a positive class surrounding a starting point.
//
// We are formulating a generative model for this task because
// we need to use it within a particle filter.
//
// We are drawing on the probabilistic model for
// color names in McMahan and Stone (TACL 2015): We assume that
// the cluster we are deriving is a hypersphere around the starting point,
// defined by a fuzzy boundary. Unlike McMahan and Stone we do not assume
// that we have a region of certainty with thresholds beyond that region.
//
// Generative story:
//
// To generate a single cluster,
// * choose a starting point x0
// * choose a fuzzy threshold around the starting point:
//   Draw a mean mu_tau for the threshold from a Gamma distribution:
//   This describes the distance from x0 at which mu_tau is located.
//   Draw a standard deviation sigma_tau for the threshold from a Gamma
//   distribution
//
// * To generate a data point,
//   - flip a coin to choose whether the data point is inside the cluster or
//     outside
//   - draw a threshold for this datapoint from a Gaussian
//     with mu_tau and sigma_tau
//   - if the point is inside: generate "inside distance < tau"
//     if the point is outside: generate "outside distance > tau"


//-------------------------------
// Hyperparameters
//-----

// for data generation:
// we generate data from 3 Gaussians. How many data points per Gaussian?
var hyperNumDataPointsPerGaussian = 5
// what are the means and sigmas of the three Gaussians from which we generate data?
var hyperDataGenerationGaussians = [
    { name : "a", muX : 3, muY : 3, sigmaX : 1, sigmaY : 1 },
    { name : "b", muX : -1, muY : -1, sigmaX : 1, sigmaY : 1},
    { name : "c", muX : 0, muY : 5, sigmaX : 1, sigmaY : 1 }
]

// hyperparameters for the parameters mu and sigma of the threshold:
// both mu and sigma are drawn from Gamma distributions
var hyperMuShape = 3.0
var hyperMuScale = 1.0
var hyperSigmaShape = 0.25
var hyperSigmaScale = 1.0

//-------------------------------
// data generation
// (as this is a demo, we generate data for the algorithm to work on)
//-----

// generate n data points, named for example a1, a2, a3... if nameprefix = 'a',
// from a multivariate Gaussian of 2 dimensions with diagonal covariance matrix
// (that is, draw from one Gaussian for the x dimension, and one for the y dimension)
var generateDataPoints = function(n, nameprefix, muX, muY, sigmaX, sigmaY) {
    return mapN(function(i) {
	return { "name" : nameprefix + i,
		 "x" : gaussian( { mu : muX, sigma : sigmaX}),
		 "y" : gaussian( { mu : muY, sigma : sigmaY})
	       }
    }, n)
}

// generate multiple sets of data points recursively
var generateDataPointsRecursively = function(gaussianParam) {
    if (gaussianParam.length == 0) {
	return [ ]
    } else {
	var thisSet = generateDataPoints(hyperNumDataPointsPerGaussian, gaussianParam[0].name,
					 gaussianParam[0].muX, gaussianParam[0].muY,
					 gaussianParam[0].sigmaX, gaussianParam[0].sigmaY)
	return thisSet.concat(generateDataPointsRecursively(_.tail(gaussianParam)))
    }
}

// compute pairwise distances between data points
var euclideanDist = function(dp1, dp2){
    // sqrt( (x1-x2)^2 + (y1-y2)^2)
    return Math.sqrt( Math.pow(dp1.x - dp2.x, 2) + Math.pow(dp1.y - dp2.y, 2))
}

// returns a list L of lists. L[0] contains the distances from datapoint #0 to all datapoints,
// L[1] has the distances from datapoint #1 to all datapoints, etc.
var pairwiseEuclidean = function(datapoints) {
    return map(function(dp1) {
	return map(function(dp2) {
	    return dp1.name == dp2.name ? 0.0 : euclideanDist(dp1, dp2)
	}, datapoints)
    }, datapoints)
}

// data: same number of points from 3 Gaussians
var dataPoints = generateDataPointsRecursively(hyperDataGenerationGaussians)

// pairwise Euclidean distances between the data points
var dpDistances = pairwiseEuclidean(dataPoints)

//-------------------------------
// helper functions
//-----

// map a cluster to the names of its members
var memberNames = function(cluster) {
    return map( function(i) { return dataPoints[i].name }, cluster)
}


//-------------------------------
// model
// This is one incremental sample for the particle filter
//-----

// inIndices: list of indices of datapoints that are in the cluster
// candidates: list of indices of datapoints that can potentially be added to the cluster
// startIndex: index of datapoint that is the starting point
// muTau, sigmaTau: parameters of the threshold distribution

var extendCluster = function(inIndices, candidates, startIndex, muTau, sigmaTau) {

    if (candidates.length == 0) {
	// we have considered all candidates, the cluster is finished
	return inIndices;
    } else {
	// consider the next candidate
	var candidate = candidates[0]

	// choose a threshold for it
	var tau = gaussian( { mu : muTau, sigma : sigmaTau } )

	// choose whether it is a member
	var isMember = flip()

	// The candidate needs to be on the right side of threshold tau
	if (isMember) {
	    condition( dpDistances[ startIndex ][ candidate ] < tau)

	    return extendCluster( inIndices.concat( [ candidate ] ),
				  candidates.slice(1),
				  startIndex, muTau, sigmaTau)
	} else {
	    condition( dpDistances[ startIndex ][ candidate ] > tau)

	    return extendCluster(inIndices,
				 candidates.slice(1),
				 startIndex, muTau, sigmaTau)
	}
    }
}

var model = function(startIndex) {
    var muTau = gamma({shape : hyperMuShape, scale : hyperMuScale })
    var sigmaTau = gamma( { shape : hyperSigmaShape, scale : hyperSigmaScale })

    // cluster initially has only startIndex
    // candidates: range[0:len(dataPoints)] minus startIndex
    return extendCluster( [ startIndex ],
			  filter( function(i) { return i != startIndex }, _.range(dataPoints.length)),
			  startIndex, muTau, sigmaTau)
}
			  

//-------------------------------
// Inference
//-----

var Experiment = function () {
    var startIndex =  randomInteger(dataPoints.length)

    display("starting point")
    display(dataPoints[startIndex].name)

    var result = Infer( { method : "SMC", particles : 1000 }, function() {
	return memberNames(model(startIndex))
    })

    return result;
}

Experiment()
