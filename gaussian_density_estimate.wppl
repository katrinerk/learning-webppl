// Gaussian density estimation, lazy version:
// assume we have a set X of points that we assume were sampled from a single Gaussian
// then what is the probability that a new data point xnew comes from the same Gaussian?
// p(xnew | X) = integral p(xnew|theta) p(theta|X) dtheta
// where
// p(theta|X) propto p(X|theta) p(theta)
//
// That is, we integrate over all possible means and stdev.s for the Gaussian generating X
// to determine how likely xnew was to be generated by each of them
//
// we simply use Infer() to determine probabilities of mus and sigmas. This could probably be done better.

//------------------------------------
// data

// these data points are copied from a probmods.org script on Gaussian mixtures, for simplicity
var knownData = [{"name":"a0","x":1.5343898902525506,"y":2.3460878867298494},
		 {"name":"a1","x":1.1810142951204246,"y":1.4471493362364427},
		 {"name":"a2","x":1.3359476185854833,"y":0.5979097803077312},
		 {"name":"a3","x":1.7461500236610696,"y":0.07441351219375836},
		 {"name":"a4","x":1.1644280209698559,"y":0.5504283671279169},
		 {"name":"a5","x":0.5383179421667954,"y":0.36076578484371535},
		 {"name":"a6","x":1.5884794217838352,"y":1.2379018386693668},
		 {"name":"a7","x":0.633910148716343,"y":1.21804947961078},
		 {"name":"a8","x":1.3591395983859944,"y":1.2056207607743645},
		 {"name":"a9","x":1.5497995798191613,"y":1.555239222467223} ]

//------------------------------------
// core functions

//------------
// priors:
// for mu
var muPrior = {mu : 0.0, sigma : 10 }
// for sigma
var sigmaPrior = { shape : 2.0, scale : 1.0}

//------------
// draw a new datapoint
var newData = { "name" : "anew", "x" : gaussian(2,1), "y" : gaussian(3,2) }

//------------
// determine the probability distribution over parameter sets theta for knownData
var pTheta = Infer({method: 'MCMC', samples: 200, lag: 100}, function(){
    // draw mu and sigma
    var mu = {x: gaussian(muPrior), y: gaussian(muPrior)}
    var sigma = { x : gamma(sigmaPrior), y : gamma(sigmaPrior) }
    
    var obsFn = function(datum){
	// factor: the Gaussian with this sampled mu and sigma has produced the datum
	observe(Gaussian({mu: mu.x, sigma: sigma.x}), datum.x)
	observe(Gaussian({mu: mu.y, sigma: sigma.y}), datum.y)
    }
    // record the factors for all observations
    mapData({data: knownData}, obsFn)

   // returns the sampled mu and sigma
    return {mu: mu, sigma: sigma}    
})

//------------
// determining the probability of the new datapoint
var pNew = Infer( { method : "forward", samples : 1000 }, function() {
    var theta = pTheta.sample()
    return DiagCovGaussian({mu : Vector([theta.mu.x, theta.mu.y]), sigma : Vector( [ theta.sigma.x, theta.sigma.y ]) } ).score(Vector( [ newData.x, newData.y] ) )
})


//------------------------------------
// displaying stuff

display(["new datapoint", newData])
display("expected mu and sigma for known data:")
display( { mu : [ expectation(pTheta, function(x) { return x.mu.x }), expectation(pTheta, function(x) { return x.mu.y })],
	   sigma : [ expectation(pTheta, function(x) { return x.sigma.x }), expectation(pTheta, function(x) { return x.sigma.y })]
	 })

// probability of the new datapoint under the distribution of theta values
display("posterior probability of new datapoint:")
display( Math.exp(expectation(pNew)))
